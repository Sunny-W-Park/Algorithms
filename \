#### BOJ ####

#1138

import sys
input = sys.stdin.readline

N = int(input())
arr = list(map(int, input().split()))
dp = [0 for _ in range(N)]

for i in range(N):
    count = 0
    for j in range(N):
        if count == arr[i]:
            for k in range(j, N):
                if dp[j] == 0:
                    dp[j] = i+1
                    break
        if dp[j] == 0:
            count += 1

print(dp)

#1138

import sys
input = sys.stdin.readline

N = int(input())
arr = list(map(int, input().split()))
dp = [0 for _ in range(N)]

for i in range(0, len(arr)):
    for j in range(arr[i], N):
        if dp[j] == 0:
            dp[j] = i+1
            break

print(dp)
    



##

def gcd(A, B):
    if B == 0:
        return A
    else:
        return gcd(B, A%B)

s = input().split(":")
A = int(s[0])
B = int(s[1])
X = str(A//gcd(A, B))
Y = str(B//gcd(A, B))
print(X+":"+Y)

#5635

import sys
input = sys.stdin.readline

N = int(input())
data = []
for _ in range(N):
    name, day, month, year = map(str, input().split())
    day, month, year = int(day), int(month), int(year)
    data.append([name, day, month, year])

data.sort(key = lambda x:x[1], reverse = False)
data.sort(key = lambda x:x[2], reverse = False)
data.sort(key = lambda x:x[3], reverse = False)

print(data[-1][0])
print(data[0][0])






s = input().split("-")
result = ''
print(s)

#1764

import sys
input = sys.stdin.readline

N, M = map(int, input().split())



#1806

import sys
input = sys.stdin.readline

N, S = map(int, input().split())
arr = list(map(int, input().split()))

s = 0
e = 0
_sum = 0
_min = int(10**9+1)

for s in range(N):
    while e < N and _sum < S:
        _sum += arr[e]
        e += 1
    if _sum >= S:
        _min = min(_min, e-s)
    _sum -= arr[s]

if _min >= int(10**9):
    print(0)
else:
    print(_min)

#1806

import sys
input = sys.stdin.readline

N, S = map(int, input().split())
arr = list(map(int, input().split()))

s = N-1
e = N-1
_min = int(10**9+1)

for s in range(N-1, -1, -1):
    _sum = 0
    t = []
    while e >= 0 and _sum < S:
        _sum += arr[e]
        t.append(arr[e])
        e -= 1
    if _sum >= S:
        _sum -= arr[s]
    print(t)
    if len(t) > 1:
        _min = min(_min, len(t))

if _min >= int(10**9):
    print(0)
else:
    print(_min)


#1806

import sys
input = sys.stdin.readline

N, S = map(int, input().split())
arr = list(map(int, input().split()))

s = 0
e = 0
_min = int(10**9+1)

for s in range(N):
    _sum = 0
    t = []
    while e < N and _sum < S:
        _sum += arr[e]
        t.append(arr[e])
        e += 1
    if _sum >= S:
        _sum -= arr[s]
    print(t)
    if len(t) > 1:
        _min = min(_min, len(t))

if _min >= int(10**9):
    print(0)
else:
    print(_min)

#2163

import sys
input = sys.stdin.readline

N = int(input())
arr = list(map(int, input().split()))
X = int(input())

arr.sort()
s = 0
e = N-1
count = 0

while s < e:
    _sum = arr[s] + arr[e]
    if _sum == X:
        count += 1
        s += 1
        e -= 1
    if _sum < X:
        s += 1
    if _sum > X:
        e -= 1

print(count)


#2163

import sys
input = sys.stdin.readline

N = int(input())
arr = list(map(int, input().split()))
X = int(input())

_sum = 0
count = 0

for s in range(N):
    _sum += arr[s]
    for e in range(s+1, N):
        if _sum + arr[e] == X:
            count += 1
            break
    _sum -= arr[s]

print(count)


#2163

import sys
input = sys.stdin.readline

N = int(input())
arr = list(map(int, input().split()))
X = int(input())

s = 0
e = 0
_sum = 0

for s in range(N):
    while _sum < X and e < N:
        _sum += arr[e]
        e += 1
    print(_sum)
    if _sum == X:
        print(s, e)
        _sum -= arr[s]
    if _sum > X:
        _sum -= arr[e]

        


#9663 재풀이 - check 조건 통일

####

#9663 재풀이

import sys
input = sys.stdin.readline
N = int(input())

row = [0] * N
visited = [0] * N
count = 0

def check(q):
    for i in range(q):
        if abs(row[q] - row[i]) == (q - i):
            return False
    return True

def dfs(q):
    global count
    if q == N:
        count += 1
        return
    for i in range(N):
        if visited[i] == 1:
            continue
        ##
        row[q] = i
        if check(q) == True:
            visited[i] = 1
            dfs(q+1)
            visited[i] = 0

dfs(0)
print(count)




#9663 재풀이

import sys
import time
sys.setrecursionlimit(10000)

N = int(input())
p = []
ans = 0

def dfs():
    global ans
    if len(p) == N:
        ans += 1
        return
    else:
        for i in range(N):
            for j in range(N):
                if len(p) > 0:
                    if i < p[-1][0]:
                        continue
                avab = True
                for k in p:
                    if i == k[0] or j == k[1]:
                        avab = False
                        continue
                    if abs(i-k[0]) == abs(j-k[1]):
                        avab = False
                        continue
                if avab == True:
                    p.append((i, j))
                    dfs()
                    p.pop()

start = time.time()
dfs()
print(ans)
print("time: ", time.time() - start)

#9663

N = int(input())
p = []

def dfs():
    if len(p) == N:
        return print(p)
    else:
        for i in range(N):
            for j in range(N):
                if (i, j) in p:
                    continue
                else:
                    avab = True
                    for k in p:
                        if i == k[0] or j == k[1]:
                            avab = False
                        if abs(i-k[0]) == abs(j-k[1]):
                            avab = False
                        if i < k[0] or j < k[1]:
                            avab = False
                    if avab == True:
                        p.append((i, j))
                        dfs()
                        p.pop()

dfs()


for i in range(0, N):
    for j in range(0, N):
        print((i, j), end = ' ')
    print()


#11727

N = int(input())
dp = [0] * 1001
dp[1] = 1
dp[2] = 3
for i in range(3, 1001):
    dp[i] = 2*dp[i-2] + dp[i-1]
print(dp[N] % 10007)

#10825

import sys
input = sys.stdin.readline
N = int(input())
grades = []
for _ in range(N):
    a, b, c, d = map(str, input().split())
    b = int(b)
    c = int(c)
    d = int(d)
    grades.append([a, b, c, d])
    
grades.sort(key=lambda x: x[0])
grades.sort(key=lambda x: x[3], reverse = True)
grades.sort(key=lambda x: x[2])
grades.sort(key=lambda x: x[1], reverse = True)

for i in grades:
    print(i[0])



#9251 재풀이

word1 = input()
word2 = input()
len_w1 = len(word1)
len_w2 = len(word2)
dp = [0 for _ in range(len_w2)]

for i in range(len_w1):
    count = 0
    for j in range(len_w2):
        if count < dp[j]:
            count = dp[j]
        elif word1[i] == word2[j]:
            dp[j] = count + 1

print(max(dp))

#9251

S = input()
T = input()
lcs = [0 for _ in range(len(S))]
idx = [[] for _ in range(len(S))]

for i in range(len(S)):
    for j in range(len(S)):
        if S[i] == T[j]:
            idx[i].append(j)

for i in range(len(S)):
    if i == 0:
        if len(idx[0]) > 0:
            lcs[i] = 1
    else:
        found = False
        for j in idx[i]:
            for k in idx[i-1]:
                if j > k:
                    found = True
                    break
        if found == False:
            lcs[i] = 1
        else:
            lcs[i] = lcs[i-1] + 1
print(idx)
print(lcs)

#11724

import sys
input = sys.stdin.readline

N, M = map(int, input().split())
graph = [[] for _ in range(N+1)]
visited = [0 for _ in range(N)]

for _ in range(M):
    a, b = map(int, input().split())
    graph[a].append(b)
    graph[b].append(a)

def dfs(start, visited):
    global connected
    visited[start-1] = 1
    for i in graph[start]:
        if visited[i-1] == 0:
            dfs(i, visited)
            connected = True

count = 0
for i in range(1, N+1):
    connected = False
    if visited[i-1] == 0:
        dfs(i, visited)
        if connected == True:
            count += 1
        else:
            count += 1

print(count)
    


