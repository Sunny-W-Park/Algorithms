#### BOJ ####

#1251

result = []
s = input()

cut = []
for i in range(1, len(s)-1):
    for j in range(i+1, len(s)-1):
        for k in range(j+1, len(s)-1):
            cut.append([i, j, k])




#2293

import sys
input = sys.stdin.readline
N, K = map(int, input().split())

dp = [0] * (K+1)
coins = []
for _ in range(N):
    coins.append(int(input()))

dp[0] = 1
for i in coins:
    for j in range(1, K+1):
        if j - i >= 0:
            dp[j] += dp[j - i]

print(dp[K])


##

N = int(input())
nc = 0
c = 0
for _ in range(N):
    a = int(input())
    if a == 0:
        nc += 1
    if a == 1:
        c += 1

if nc > c:
    print("Junhee is not cute!")
else:
    print("Junhee is cute!")
#9084

import sys
input = sys.stdin.readline

T = int(input())
for _ in range(T):
    N = int(input())
    coins = list(map(int, input().split()))
    M = int(input())
    dp = [0] * (M+1)
    dp[0] = 1
    for i in coins:
        for j in range(1, M+1):
            if j - i >= 0:
                dp[j] += dp[j-i]
    print(dp[M])

#9084

import sys
input = sys.stdin.readline

T = int(input())
for _ in range(T):
    N = int(input())
    coins = list(map(int, input().split()))
    M = int(input())
    dp = [0] * (M+1)
    for i in coins:
        dp[i] = 1 

    for i in range(1, M):
        for j in range(len(coins)-1, -1, -1):
            if i in coins:
                if(i != coins[j]):
                    dp[i] = max(dp[i], dp[coins[j]]+dp[i-coins[j]])
                    break
            if (i - coins[j]) in coins:
                dp[i] = max(dp[i], dp[coins[j]]+dp[i-coins[j]]-1)
                coins.append(i)
                break
    print(dp)
    print(dp[M])

            

#14650

import sys

sys.setrecursionlimit(100000)

N = int(input())
res = 0

def make_num(n, s):
    global res
    for i in range(3):
        if n == 0 and i == 0:
            continue
        if n == N:
            if s % 3 == 0:
                res += 1
                return res
        else:
            make_num(n+1, int(str(s+i)))

make_num(0, 0)
print(res)





#14650

N = int(input())
dp = [0] * (10)
dp[0] = 0
dp[1] = 0
dp[2] = 2
dp[3] = 4

for i in range(4, 10):
    result = 0
    for j in range(1, i):
        result += dp[j] * dp[i-j]
    dp[i] = result + dp[i-1]

if N==3:
    print(dp[2]+dp[3])
else:
    print(dp[N])


#13699

N = int(input())
dp = [0 for _ in range(36)]
dp[0] = 1

for i in range(1, N+1):
    f = 0
    s = i
    result = 0
    while s >= 0:
        s -= 1
        result += dp[f] * dp[s]
        f += 1
    dp[i] = result

print(dp[N])


#2636

import sys
from collections import deque

input = sys.stdin.readline

M, N = map(int, input().split())
graph = []
for _ in range(M):
    graph.append(list(map(int, input().split())))

t = 0
for i in range(M):
    for j in range(N):
        if graph[i][j] == 1:
            t += 1

dx = [-1, 1, 0, 0]
dy = [0, 0, -1, 1]

def bfs():
    visited = [[False for _ in range(N)] for _ in range(M)]
    cnt = 0
    q = deque()
    q.append((0, 0))
    while q:
        px, py = q.popleft()
        for i in range(4):
            nx = px + dx[i]
            ny = py + dy[i]
            if 0 <= nx <= M-1 and 0 <= ny <= N-1:
                if graph[nx][ny] == 0 and visited[nx][ny] == False:
                    visited[nx][ny] = True
                    q.append((nx, ny))
                if graph[nx][ny] == 1:
                    visited[nx][ny] = True
                    graph[nx][ny] = 0
                    cnt += 1
    return cnt

time = 0
counts = []
while t != 0:
    time += 1
    count = bfs()
    t -= count
    counts.append(count)

print(time)
print(counts[-1])
    
#
#cheese = 0
#for i in range(N):
#    for j in range(M):
#        if graph[i][j] == 1:
#            cheese += 1
#
#cnt = 0
#time = 0
#
#pos_c = set()
#for i in range(N):
#    for j in range(M):
#        if graph[i][j] == 0:
#
#while cheese - cnt != 0:
#    time += 1
#    q = []
    



#11478

import sys
input = sys.stdin.readline().strip

save = set()
S = input()

for i in range(1, len(S)+1):
    for j in range(len(S)):
        if j+i <= len(S):
            save.add(S[j:j+i])

print(len(save))

#1269

import sys
input = sys.stdin.readline

N, M = map(int, input().split())
A = set(map(int, input().split()))
B = set(map(int, input().split()))

C = (A-B)
D = (B-A)
print(len(C) + len(D))

##2636
#
#import sys
#input = sys.stdin.readline
#
#N, M = map(int, input().split())
#graph = []
#for _ in range(N):
#    graph.append(list(map(int, input().split())))
#
#wcheese = 0
#for i in range(N):
#    for j in range(M):
#        if graph[i][j] == 1:
#            cheese += 1
#
#cnt = 0
#time = 0
#
#pos_c = set()
#for i in range(N):
#    for j in range(M):
#        if graph[i][j] == 0:
#
#while cheese - cnt != 0:
#    time += 1
#    q = []
    

#c(2)인 곳은 녹이기
#맞닿아 있는 곳(1일 경우)만 c(2)로 만들어주기
#맞닿아 있는 곳(1)이 없을 경우 2의 개수 저장
#n분 출력

#1764

N, M = map(int, input().split())
dict_a = {}
for _ in range(N):
    p = input()
    if p in dict_a:
        dict_a[p] += 1
    else:
        dict_a[p] = 1
print(dict_a)

result = []
for _ in range(M):
    p = input()
    if p in dict_a:
        result.append(p)

print(len(result))
for i in sorted(result):
    print(i)


#14425

N, M = map(int, input().split())
dict = {}
for _ in range(N):
    s = input()
    if s in dict:
        dict[s] += 1
    else:
        dict[s] = 1

result = 0
for _ in range(M):
    check = input()
    if check in dict:
        result += 1
    else:
        continue

print(result)


#2822

arr = []
for i in range(8):
    arr.append([int(input()), i+1])

arr.sort(key = lambda x: x[0])
newarr = arr[3:8]
newarr.sort(key = lambda x: x[1])
result = 0
for i in newarr:
    result += i[0]
print(result)
for i in newarr:
    print(i[1], end = ' ')




#12865

import sys
input = sys.stdin.readline

N, K = map(int, input().split())
dp = [ [0 for _ in range(K+1)] for _ in range(N)] 

W1, V1 = map(int, input().split())

for i in range(W1, K+1):
    dp[0][i] = V1

for i in range(1, N):
    W, V = map(int, input().split())
    for j in range(0, K+1):
        if j - W >= 0:
            dp[i][j] = max(dp[i-1][j], dp[i-1][j-W] + V)
        else:
            dp[i][j] = dp[i-1][j]

print(max(dp[N-1]))


        


#15233

A, B, G = map(int, input().split())
players_A = list(map(str, input().split()))
players_B= list(map(str, input().split()))
scores = list(map(str, input().split()))

result_A = 0
result_B = 0

for i in scores:
    for j in players_A:
        if i == j:
            result_A += 1
            break
    for k in players_B:
        if i == k:
            result_B += 1
            break

if result_A > result_B:
    print("A")
elif result_B > result_A:
    print("B")
else:
    print("Tie")




#12865

#1463

import sys
input = sys.stdin.readline

N = int(input())

dp = [0] * (N+1)
dp[0] = 0
dp[1] = 0

for i in range(2, N+1):
    if i % 2 == 0 and i % 3 == 0:
        dp[i] = min(dp[i//2]+1, dp[i//3]+1, dp[i-1]+1)
    elif i % 2 == 0:
        dp[i] = min(dp[i//2]+1, dp[i-1]+1)
    elif i % 3 == 0:
        dp[i] = min(dp[i//3]+1, dp[i-1]+1)
    else:
        dp[i] = dp[i-1]+1

print(dp[N])


#12865

import sys
input = sys.stdin.readline

N, K = map(int, input().split())
dp = [0] * (100001)
idx = []

for _ in range(N):
    W, V = map(int, input().split())
    dp[W] = max(dp[W], V)
    idx.append(W)

for i in range(1, N):
    for j in range(0, i):
        s = idx[j]
        e = idx[i]
        if s + e <= K:
            dp[s + e] = max(dp[s + e], dp[s]+dp[e])

print(max(dp[N]))

#12865

import sys
input = sys.stdin.readline

N, K = map(int, input().split())
dp = [0] * (K+1)
arr = []

for _ in range(N):
    W, V = map(int, input().split())
    arr.append([W, V])

arr.sort(key = lambda x: x[0])

for i in range(0, N):
    if i == 0:
        dp[arr[i][0]] = arr[0][1]
    else:
        for j in range(0, i):
            if arr[i][0] + arr[j][0] <= K:
                dp[arr[i][0]+arr[j][0]] = max(dp[arr[i][0]+arr[j][0]], arr[i][1]+arr[j][1])
            else:
                dp[arr[i][0]] = max(dp[arr[i][0]], arr[i][1])

print(max(dp))


#    if dp[i] == 0:
#        continue
#    else:
#        for j in range(1, i):
#            if dp[j] != 0 and i + j <= K:
#                dp[i+j] = max(dp[i+j], dp[i]+dp[j])

#print(max(dp))



#11055 재풀이

import sys
input = sys.stdin.readline

N = int(input())
arr = list(map(int, input().split()))

dp = [0] * N
dp[0] = arr[0]

for i in range(1, N):
    comp = []
    for j in range(i):
        if arr[j] < arr[i]:
            comp.append(dp[j])
    if len(comp) < 1:
        dp[i] = arr[i]
    else:
        dp[i] = arr[i] + max(comp)

print(max(dp))

#11055

import sys
input = sys.stdin.readline

N = int(input())
arr = list(map(int, input().split()))

idx = []
idx.append(N-1)

for i in range(N-2, -1, -1):
    if arr[i] > arr[idx[-1]]:
        idx.append(i)

_max = 0
for i in idx:
    result = arr[i]
    end = arr[i]
    for j in range(i-1, -1, -1):
        if end > arr[j]:
            result += arr[j]
            end = arr[j]
    _max = max(_max, result)

print(_max)


#14501 재풀이

N = int(input())

table = []
for _ in range(N):
    t, p = map(int, input().split())
    table.append([t, p])

dp = [0] * (N+1)

for i in range(N-1, -1, -1):
    if i + table[i][0] -1 > N-1:
        dp[i] = dp[i+1]
    else:
        dp[i] = max(dp[i+1], dp[i+table[i][0]]+table[i][1])

print(max(dp))

#14501

N = int(input())

table = []
for _ in range(N):
    t, p = map(int, input().split())
    table.append([t, p])

dp = [0] * N

for i in range(N):
    if i + table[i][0]-1 <= N-1:
        dp[i + table[i][0] - 1] = max(dp[i + table[i][0] - 1], dp[i]+table[i][1])
    else:
        dp[i] = dp[i-1]
    print(dp)

print(dp[N-1])


#15720

import sys
input = sys.stdin.readline

b, s, d = map(int, input().split())
burgers = list(map(int, input().split()))
sides = list(map(int, input().split()))
drinks = list(map(int, input().split()))

before_discount = sum(burgers) + sum(sides) + sum(drinks)
after_discount = 0

burgers.sort(reverse = True)
sides.sort(reverse = True)
drinks.sort(reverse = True)

for i in range(d):
    np = int((burgers[i] + sides[i] + drinks[i]) * 9 // 10)
    after_discount += np

for i in range(d, s):
    after_discount += sides[i]

for i in range(d, b):
    after_discount += burgers[i]

print(before_discount)
print(after_discount)





#16435

import sys
input = sys.stdin.readline

N, L = map(int, input().split())
fruits = list(map(int, input().split()))
fruits.sort()

length = L

for i in range(0, N):
    if length >= fruits[i]:
        length += 1
    else:
        break

print(length)

K = int(input())

#### Programmers ####

#42747 H-Index

import bisect

citations = [3, 0, 6, 1, 5]

def solution(citations):
    answer = 0

    citations.sort()
    idx = len(citations)-1
    start = citations[idx]
    
    while idx >= 0:
        k = bisect.bisect_left(citations, start)
        print(k)
        if len(citations) - k == start:
            answer = max(answer, start)
            print(k, start,  answer)
        start -= 1
        idx -= 1
    
    print(answer)

    return answer

solution(citations)

#### Elice ####

# 절대 반지

nickname = input()
N = int(input())
cnt = 0
for _ in range(N):
    t = str(input())
    t = t + t[0:2]
    print()
    print(t)
    for i in range(0, len(t)-2):
        if t[i:i+3] == nickname:
            cnt += 1
print(cnt)



# 떡만이

import sys
input = sys.stdin.readline

M = int(input())
arr = [i for i in range(0, 4)]

for _ in range(M):
    a, b = map(int, input().split())
    prev_a = arr[a]
    prev_b = arr[b]
    arr[b] = prev_a
    arr[a] = prev_b

for i in range(len(arr)):
    if arr[i] == 1:
        print(i)


# 절대 반지

# 김박사

import sys
input = sys.stdin.readline
N = int(input())

result = 0

for i in range(N):
    num = int(input())
    result += num

_print = ''

for i in range(10):
    _print += str(result)[i]

print(_print)
    

# 도도새

import sys
input = sys.stdin.readline

N = int(input())
B = list(map(int, input().split()))
A = [0] * N

A[0] = B[0]
for i in range(1, N):
    cum = sum(A[0 : i])
    A[i] = (i+1)*B[i] - cum

for i in A:
    print(i, end = ' ')


#### BOJ ####

#2559

import sys
input = sys.stdin.readline

N, K = map(int, input().split())
arr = list(map(int, input().split()))

start = 0
end = K-1
S = sum(arr[start:end+1])
result = S 

while end < N-1:
    S -= arr[start]
    start += 1
    end += 1
    S += arr[end]
    result = max(result, S)

print(result)



#11659 재풀이

import sys
input = sys.stdin.readline
N, M = map(int, input().split())
arr = list(map(int, input().split()))
dp = [0]*(N+1)
dp[1] = arr[0]
for i in range(2, N+1):
    dp[i] = dp[i-1] + arr[i-1]

for _ in range(M):
    i, j = map(int, input().split())
    print(dp[j] - dp[i-1])


#11659 시간초과

import sys
input = sys.stdin.readline
N, M = map(int, input().split())
arr = list(map(int, input().split()))
for _ in range(M):
    i, j = map(int, input().split())
    print(sum(arr[i-1:j]))





#1439

import sys
input = sys.stdin.readline
S = input()

result = int(10**9)

cnt = 0
flag = False
for i in range(len(S)):
    if S[i] == '0' and flag == False:
        flag = True
        cnt += 1
    if S[i] == '1':
        flag = False
result = min(result, cnt)

cnt = 0
flag = False
for i in range(len(S)):
    if S[i] == '1' and flag == False:
        flag = True
        cnt += 1
    if S[i] == '0':
        flag = False
result = min(result, cnt)

print(result)




#9237

import sys
input = sys.stdin.readline

N = int(input())
arr = list(map(int, input().split()))
_max = 0

arr.sort(reverse = True)
for i in range(N):
    _max = max(_max, i+arr[i]+2)

print(_max)


#11170

import sys
input = sys.stdin.readline

T = int(input())

for _ in range(T):
    N, M = map(int, input().split())
    count = 0
    for i in range(N, M+1):
        a = str(i)
        for j in range(len(a)):
            if a[j] == '0':
                count += 1
    print(count)

#1292

A, B = map(int, input().split())
arr = []
n = 1
while len(arr) <= B:
    for i in range(n):
        arr.append(n)
    n += 1
    print(arr)

print(sum(arr[A-1:B]))

#17070

N = int(input())
g = []
for _ in range(N):
    g.append(list(map(int, input().split())))

count = 0

def dfs(x, y, status):
    global count
    if x == N-1 and y == N-1:
        count += 1

    if status == 'h':
        if (y+1) <= N-1:
            if g[x][y+1] == 0:
                dfs(x, y+1, 'h')
        if (x+1) <= N-1 and (y+1) <= N-1:
            if g[x+1][y] == 0 and g[x][y+1] == 0 and g[x+1][y+1] == 0:
                dfs(x+1, y+1, 'd')

    if status == 'v':
        if (x+1) <= N-1:
            if g[x+1][y] == 0:
                dfs(x+1, y, 'v')
        if (x+1) <= N-1 and (y+1) <= N-1:
            if g[x+1][y] == 0 and g[x][y+1] == 0 and g[x+1][y+1] == 0:
                dfs(x+1, y+1, 'd')
    
    if status == 'd':
        if (y+1) <= N-1:
            if g[x][y+1] == 0:
                dfs(x, y+1, 'h')
        if (x+1) <= N-1:
            if g[x+1][y] == 0:
                dfs(x+1, y, 'v')
        if (x+1) <= N-1 and (y+1) <= N-1:
            if g[x+1][y] == 0 and g[x][y+1] == 0 and g[x+1][y+1] == 0:
                dfs(x+1, y+1, 'd')
    
dfs(0, 1, 'h')
print(count)

#2082

import sys
input = sys.stdin.readline

graph = []

for i in range(5):
    graph.append(input().split("  "))

print(graph)

graph = [
        [(1, 1), (2, 2), (3, 3)],
        [(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (0, 1), (1, 1), (2, 1), (3, 1), (4, 1)],
        [(1, 0), (1, 1), (3, 1), (3, 2)],
        [(1, 0), (1, 1), (3, 0), (3, 2)],
        [(0, 1), (1, 1), (3, 0), (3, 1), (4, 0), (4, 1)],
        [(1, 1), (1, 2), (3, 0), (3, 1)],
        [(1, 1), (1, 2), (3, 1)],
        [(1, 0), (1, 1), (2, 0), (2, 1), (3, 0), (3, 1), (4, 0), (4, 1)],
        [(1, 1), (3, 1)],
        [(1, 1), (3, 0), (3, 1)]
        ]

nums = []

for i in range(5):
    nums.append(input().split())

print(nums)


#2947

import sys
input = sys.stdin.readline

arr = list(map(int, input().split()))
result = []

while True:
    sorted = True
    for i in range(4):
        a = arr[i]
        b = arr[i+1]
        if a > b:
            arr[i] = b
            arr[i+1] = a
            for j in range(5):
                print(arr[j], end = ' ')
            print()
    for i in range(4):
        if arr[i] > arr[i+1]:
            sorted = False
    if sorted == True:
        break

#2082




#2960

import sys
input = sys.stdin.readline

N, K = map(int, input().split())

result = 0
cnt = 0
dp = [0 for _ in range(1001)]

for i in range(2, N+1):
    R = i
    while R <= N:
        if dp[R] == 0:
            dp[R] = 1
            cnt += 1
        if cnt == K:
            result = R
            break
        R = R + i
    if result != 0:
        print(result)
        break

    #if cnt == K:
    #    print(R)
    #    break


        


#1138

import sys
input = sys.stdin.readline

N = int(input())
arr = list(map(int, input().split()))
dp = [0 for _ in range(N)]

for i in range(N):
    count = 0
    for j in range(N):
        if count == arr[i]:
            for k in range(j, N):
                if dp[k] == 0:
                    dp[k] = i+1
                    break
            break
        if dp[j] == 0:
            count += 1

for i in range(N):
    print(dp[i], end = ' ')

#1138

import sys
input = sys.stdin.readline

N = int(input())
arr = list(map(int, input().split()))
dp = [0 for _ in range(N)]

for i in range(0, len(arr)):
    for j in range(arr[i], N):
        if dp[j] == 0:
            dp[j] = i+1
            break

print(dp)
    



##

def gcd(A, B):
    if B == 0:
        return A
    else:
        return gcd(B, A%B)

s = input().split(":")
A = int(s[0])
B = int(s[1])
X = str(A//gcd(A, B))
Y = str(B//gcd(A, B))
print(X+":"+Y)

#5635

import sys
input = sys.stdin.readline

N = int(input())
data = []
for _ in range(N):
    name, day, month, year = map(str, input().split())
    day, month, year = int(day), int(month), int(year)
    data.append([name, day, month, year])

data.sort(key = lambda x:x[1], reverse = False)
data.sort(key = lambda x:x[2], reverse = False)
data.sort(key = lambda x:x[3], reverse = False)

print(data[-1][0])
print(data[0][0])






s = input().split("-")
result = ''
print(s)

#1764

import sys
input = sys.stdin.readline

N, M = map(int, input().split())



#1806

import sys
input = sys.stdin.readline

N, S = map(int, input().split())
arr = list(map(int, input().split()))

s = 0
e = 0
_sum = 0
_min = int(10**9+1)

for s in range(N):
    while e < N and _sum < S:
        _sum += arr[e]
        e += 1
    if _sum >= S:
        _min = min(_min, e-s)
    _sum -= arr[s]

if _min >= int(10**9):
    print(0)
else:
    print(_min)

#1806

import sys
input = sys.stdin.readline

N, S = map(int, input().split())
arr = list(map(int, input().split()))

s = N-1
e = N-1
_min = int(10**9+1)

for s in range(N-1, -1, -1):
    _sum = 0
    t = []
    while e >= 0 and _sum < S:
        _sum += arr[e]
        t.append(arr[e])
        e -= 1
    if _sum >= S:
        _sum -= arr[s]
    print(t)
    if len(t) > 1:
        _min = min(_min, len(t))

if _min >= int(10**9):
    print(0)
else:
    print(_min)


#1806

import sys
input = sys.stdin.readline

N, S = map(int, input().split())
arr = list(map(int, input().split()))

s = 0
e = 0
_min = int(10**9+1)

for s in range(N):
    _sum = 0
    t = []
    while e < N and _sum < S:
        _sum += arr[e]
        t.append(arr[e])
        e += 1
    if _sum >= S:
        _sum -= arr[s]
    print(t)
    if len(t) > 1:
        _min = min(_min, len(t))

if _min >= int(10**9):
    print(0)
else:
    print(_min)

#2163

import sys
input = sys.stdin.readline

N = int(input())
arr = list(map(int, input().split()))
X = int(input())

arr.sort()
s = 0
e = N-1
count = 0

while s < e:
    _sum = arr[s] + arr[e]
    if _sum == X:
        count += 1
        s += 1
        e -= 1
    if _sum < X:
        s += 1
    if _sum > X:
        e -= 1

print(count)


#2163

import sys
input = sys.stdin.readline

N = int(input())
arr = list(map(int, input().split()))
X = int(input())

_sum = 0
count = 0

for s in range(N):
    _sum += arr[s]
    for e in range(s+1, N):
        if _sum + arr[e] == X:
            count += 1
            break
    _sum -= arr[s]

print(count)


#2163

import sys
input = sys.stdin.readline

N = int(input())
arr = list(map(int, input().split()))
X = int(input())

s = 0
e = 0
_sum = 0

for s in range(N):
    while _sum < X and e < N:
        _sum += arr[e]
        e += 1
    print(_sum)
    if _sum == X:
        print(s, e)
        _sum -= arr[s]
    if _sum > X:
        _sum -= arr[e]

        


#9663 재풀이 - check 조건 통일

####

#9663 재풀이

import sys
input = sys.stdin.readline
N = int(input())

row = [0] * N
visited = [0] * N
count = 0

def check(q):
    for i in range(q):
        if abs(row[q] - row[i]) == (q - i):
            return False
    return True

def dfs(q):
    global count
    if q == N:
        count += 1
        return
    for i in range(N):
        if visited[i] == 1:
            continue
        ##
        row[q] = i
        if check(q) == True:
            visited[i] = 1
            dfs(q+1)
            visited[i] = 0

dfs(0)
print(count)




#9663 재풀이

import sys
import time
sys.setrecursionlimit(10000)

N = int(input())
p = []
ans = 0

def dfs():
    global ans
    if len(p) == N:
        ans += 1
        return
    else:
        for i in range(N):
            for j in range(N):
                if len(p) > 0:
                    if i < p[-1][0]:
                        continue
                avab = True
                for k in p:
                    if i == k[0] or j == k[1]:
                        avab = False
                        continue
                    if abs(i-k[0]) == abs(j-k[1]):
                        avab = False
                        continue
                if avab == True:
                    p.append((i, j))
                    dfs()
                    p.pop()

start = time.time()
dfs()
print(ans)
print("time: ", time.time() - start)

#9663

N = int(input())
p = []

def dfs():
    if len(p) == N:
        return print(p)
    else:
        for i in range(N):
            for j in range(N):
                if (i, j) in p:
                    continue
                else:
                    avab = True
                    for k in p:
                        if i == k[0] or j == k[1]:
                            avab = False
                        if abs(i-k[0]) == abs(j-k[1]):
                            avab = False
                        if i < k[0] or j < k[1]:
                            avab = False
                    if avab == True:
                        p.append((i, j))
                        dfs()
                        p.pop()

dfs()


for i in range(0, N):
    for j in range(0, N):
        print((i, j), end = ' ')
    print()


#11727

N = int(input())
dp = [0] * 1001
dp[1] = 1
dp[2] = 3
for i in range(3, 1001):
    dp[i] = 2*dp[i-2] + dp[i-1]
print(dp[N] % 10007)

#10825

import sys
input = sys.stdin.readline
N = int(input())
grades = []
for _ in range(N):
    a, b, c, d = map(str, input().split())
    b = int(b)
    c = int(c)
    d = int(d)
    grades.append([a, b, c, d])
    
grades.sort(key=lambda x: x[0])
grades.sort(key=lambda x: x[3], reverse = True)
grades.sort(key=lambda x: x[2])
grades.sort(key=lambda x: x[1], reverse = True)

for i in grades:
    print(i[0])



#9251 재풀이

word1 = input()
word2 = input()
len_w1 = len(word1)
len_w2 = len(word2)
dp = [0 for _ in range(len_w2)]

for i in range(len_w1):
    count = 0
    for j in range(len_w2):
        if count < dp[j]:
            count = dp[j]
        elif word1[i] == word2[j]:
            dp[j] = count + 1

print(max(dp))

#9251

S = input()
T = input()
lcs = [0 for _ in range(len(S))]
idx = [[] for _ in range(len(S))]

for i in range(len(S)):
    for j in range(len(S)):
        if S[i] == T[j]:
            idx[i].append(j)

for i in range(len(S)):
    if i == 0:
        if len(idx[0]) > 0:
            lcs[i] = 1
    else:
        found = False
        for j in idx[i]:
            for k in idx[i-1]:
                if j > k:
                    found = True
                    break
        if found == False:
            lcs[i] = 1
        else:
            lcs[i] = lcs[i-1] + 1
print(idx)
print(lcs)

#11724

import sys
input = sys.stdin.readline

N, M = map(int, input().split())
graph = [[] for _ in range(N+1)]
visited = [0 for _ in range(N)]

for _ in range(M):
    a, b = map(int, input().split())
    graph[a].append(b)
    graph[b].append(a)

def dfs(start, visited):
    global connected
    visited[start-1] = 1
    for i in graph[start]:
        if visited[i-1] == 0:
            dfs(i, visited)
            connected = True

count = 0
for i in range(1, N+1):
    connected = False
    if visited[i-1] == 0:
        dfs(i, visited)
        if connected == True:
            count += 1
        else:
            count += 1

print(count)
    


